;;;; knot-a-joke.lisp

(in-package #:knot-a-joke)

(cl-interpol:enable-interpol-syntax)

;;; "knot-a-joke" goes here. Hacks and glory await!

;; OK, now I have s-exp representation graph.
;; What I really want is to:
;;   * extract singlet, doublet, triplet, etc subgraphs.
;;   * for a given node, extract its path-subgraph

(defun direct-hashes (s-exp-graph)
  (let ((res (make-hash-table :test #'equal)))
    (iter (for (nil num edges) in s-exp-graph)
	  (setf (gethash num res)
		(let ((sub-res (make-hash-table :test #'equal)))
		  (iter (for (src-part . dst-parts) in edges)
			(setf (gethash src-part sub-res) dst-parts))
		  sub-res)))
    ;; we add an empty partition (to make all subsequent algorithms more comfortable)
    (when (and (not (gethash 0 res))
	       (equal 1 (hash-table-count (gethash 1 res))))
      (setf (gethash 0 res)
	    (let ((it (make-hash-table :test #'equal)))
	      (iter (for (key nil) in-hashtable (gethash 1 res))
		    (setf (gethash '() it) `((,key 1))))
	      it)))
    res))

(defun reverse-hashes (direct-hashes)
  (let ((res (make-hash-table :test #'equal)))
    (iter (for (num edges) in-hashtable direct-hashes)
	  ;; (format t "~a ~a~%" num edges)
	  (let ((sub-res (or (gethash (1+ num) res)
			     (setf (gethash (1+ num) res)
				   (make-hash-table :test #'equal)))))
	    (iter (for (src dests) in-hashtable edges)
		  (iter (for (dest multiplicity) in dests)
			(push (list src multiplicity)
			      (gethash dest sub-res))))))
    res))

(defun hash->assoc (hash)
  (iter (for (key val) in-hashtable hash)
	(collect (cons key val))))

(defun find-partition (reverse-hashes partition &optional layer)
  (if layer
      (or (gethash partition (gethash layer reverse-hashes))
	  (error "Partition ~a is not found in layer ~a" partition layer))
      (let ((sum (apply #'+ partition)))
	(block find-layer
	  (iter (for (key val) in-hashtable reverse-hashes)
		(iter (for (key1 val1) in-hashtable val)
		      (if (not (equal sum (apply #'+ key1)))
			  (terminate))
		      (if (equal partition key1)
			  (return-from find-layer key))))
	  (error "Partition ~a is not found on any of the layers" partition)))))
			  

(defun backpropagate-subgraph (reverse-hashes partition)
  (let ((res (make-hash-table :test #'equal))
	(reverse-hashes reverse-hashes))
    (declare (special res reverse-hashes))
    (let ((layer (find-partition reverse-hashes partition)))
      (declare (special layer))
      (when (not (gethash layer res))
	(setf (gethash layer res)
	      (make-hash-table :test #'equal)))
      (backpropagate-subgraph-elt partition))
    res))

(defun backpropagate-subgraph-elt (partition)
  (declare (special res layer reverse-hashes))
  (if (not (null partition))
      (let ((partition-edges (find-partition reverse-hashes partition layer)))
	(setf (gethash partition (gethash layer res))
	      partition-edges)
	(let ((layer (1- layer)))
	  (declare (special layer))
	  (when (and (not (zerop layer))
		     (not (gethash layer res)))
	    (setf (gethash layer res)
		  (make-hash-table :test #'equal)))
	  (iter (for (edge-src mult) in partition-edges)
		(backpropagate-subgraph-elt edge-src))))))

(defun certified-vertex-p (vertex layer)
  (declare (special layer res))
  (multiple-value-bind (it got) (gethash vertex (gethash layer res))
    (declare (ignore it))
    got))

(defmacro if-debug (&rest forms)
  (declare (ignore forms))
  nil)

;; (defmacro if-debug (&rest forms)
;;   `(format t ,@forms))

(defun extract-n-plet-subgraph-elt ()
  (declare (special direct-hashes n res layer upto-layer))
  (when (and upto-layer (> layer upto-layer))
    (return-from extract-n-plet-subgraph-elt nil))
  (if-debug "Considering layer: ~a~%" layer)
  (let ((hash--2 (gethash (- layer 2) direct-hashes))
	(hash--1 (gethash (- layer 1) direct-hashes)))
    (if (and hash--2 hash--1)
	(let ((res-hash--2 (gethash (- layer 2) res))
	      (res-hash--1 (gethash (- layer 1) res))
	      (banned-vertices (make-hash-table :test #'equal))
	      (vertex-pair-multiplicities (make-hash-table :test #'equal))
	      (vertex-incoming-paths (make-hash-table :test #'equal)))
	  (iter (for (vert nil) in-hashtable res-hash--2)
		;; we really need to go over all edges here -- not just correct n-plet ones
		(let ((edges (gethash vert hash--2)))
		  (if-debug "Considering n-2 vertex: ~a~%" vert)
		  (iter (for (vert1 mult1) in edges)
			(if-debug "  considering n-1 vertex: ~a~%" vert1)
			(let ((certified-p (multiple-value-bind (it got) (gethash vert1 res-hash--1)
					     (declare (ignore it))
					     got)))
			  (iter (for (vert2 mult2) in (gethash vert1 hash--1))
				(if-debug "    considering n vertex: ~a ~a ~a~%" vert2 mult1 mult2)
				(if (gethash vert2 banned-vertices)
				    (next-iteration))
				(when (not (gethash vert2 vertex-incoming-paths))
				  (setf (gethash vert2 vertex-incoming-paths)
					(make-hash-table :test #'equal)))
				(if (not certified-p)
				    (setf (gethash vert2 banned-vertices) t)
				    (progn (setf (gethash (list vert vert2) vertex-pair-multiplicities)
						 (+ (* mult1 mult2)
						    (or (gethash (list vert vert2) vertex-pair-multiplicities)
							0)))
					   (setf (gethash vert1
							  (gethash vert2 vertex-incoming-paths))
						 mult2))))))))
	  (if-debug "Preliminary marking done -- searching for n-plets now~%")
	  (iter (for (vert2 paths) in-hashtable vertex-incoming-paths)
		(if-debug "considering vertex ~a~%" vert2)
		(when (gethash vert2 banned-vertices)
		  (if-debug "  it's banned~%")
		  (next-iteration))
		(when (iter (for (vert nil) in-hashtable res-hash--2)
			    (let ((it (gethash (list vert vert2) vertex-pair-multiplicities)))
			      (if (and it
				       (< n it))
				  (return nil)))
			    (finally (return t)))
		  (if-debug "  it's correctly n-pletic~%")
		  (if (not (gethash layer res))
		      (setf (gethash layer res) (make-hash-table :test #'equal)))
		  (setf (gethash vert2 (gethash layer res)) nil)
		  ;; (if-debug "  vertex incoming paths: ~a~%" (gethash vert2 vertex-incoming-paths))
		  (iter (for (vert1 mult) in-hashtable paths)
			(push (list vert2 mult) (gethash vert1 res-hash--1)))))
	  (when (gethash layer res)
	    (let ((layer (1+ layer)))
	      (declare (special layer))
	      (extract-n-plet-subgraph-elt)))))))

(defun extract-n-plet-subgraph (direct-hashes n &optional upto-layer)
  (let ((res (make-hash-table :test #'equal))
	(direct-hashes direct-hashes)
	(n n))
    (declare (special res direct-hashes n))
    (setf (gethash 0 res) (gethash 0 direct-hashes))
    (iter (for (key val) in-hashtable (gethash 0 direct-hashes)))
    (setf (gethash 1 res)
	  (let ((it (make-hash-table :test #'equal)))
	    (iter (for (key nil) in-hashtable (gethash 1 direct-hashes))
		  ;; so far we don't add any edges -- we add them only later,
		  ;; when we know the vertices they lead to are good
		  (setf (gethash key it) nil))
	    it))
    (let ((layer 2)
	  (upto-layer upto-layer))
      (declare (special layer upto-layer))
      (extract-n-plet-subgraph-elt))
    res))

(defparameter *a* nil)
(defparameter *b* nil)
(defparameter *c* nil)
(defparameter *d* nil)
(defparameter *e* nil)

(defun load-the-graph (&optional (partition "2"))
  (setf *a* (parse-rg-file #?"~/quicklisp/local-projects/knot-a-joke/rep-graph-$(partition).txt"))
  (setf *b* (direct-hashes *a*))
  (setf *c* (reverse-hashes *b*)))

(defun list< (a b)
  (cond ((null a) (not (null b)))
	((null b) nil)
	((= (first a) (first b)) (list< (rest a) (rest b)))
	(t (< (first a) (first b)))))

(defun s-exps (direct-hashes)
  (iter (for (layer specs) in-hashtable direct-hashes)
	(collect (list :layer layer
		       (hash->assoc specs)))))

(defun new-appearances (direct-hashes nplet-layer)
  (let ((old-graph (extract-n-plet-subgraph direct-hashes (1- nplet-layer)))
	(new-graph (extract-n-plet-subgraph direct-hashes nplet-layer)))
    (let ((res '()))
      (iter (for (layer edges) in-hashtable new-graph)
	    (iter (for (node nil) in-hashtable edges)
		  (if (not (gethash node (gethash layer old-graph)))
		      (collect node into sub-res))
		  (finally (push (cons layer sub-res) res))))
      res)))


(defparameter *rep-3-layer-4*
  '(((12) ((9) 1))
    ((11 1) ((8 1) 1) ((9) 1))
    ((10 1 1) ((7 1 1) 1) ((8 1) 1))
    ((9 1 1 1) ((7 1 1) 1))
    ((8 2 1 1) ((7 1 1) 1) ((6 2 1) 1))
    ((7 2 2 1) ((6 2 1) 1) ((5 2 2) 1))
    ((6 2 2 2) ((5 2 2) 1))
    ((5 3 2 2) ((5 2 2) 1) ((4 3 2) 1))
    ((4 4 4) ((4 4 1) 1))
    ((4 4 3 1) ((4 4 1) 1) ((4 3 2) 1))
    ((4 4 2 2) ((4 3 2) 1))
    ((4 3 3 2) ((4 3 2) 1) ((3 3 3) 1))
    ((3 3 3 3) ((3 3 3) 1))))

(defparameter *rep-3-layer-5*
  '(((15) ((12) 1))
    ((14 1) ((11 1) 1) ((12) 1))
    ((13 1 1) ((10 1 1) 1) ((11 1) 1))
    ((12 1 1 1) ((9 1 1 1) 1) ((10 1 1) 1))
    ((11 1 1 1 1) ((9 1 1 1) 1))
    ((10 2 1 1 1) ((9 1 1 1) 1) ((8 2 1 1) 1))
    ((9 2 2 1 1) ((8 2 1 1) 1) ((7 2 2 1) 1))
    ((8 2 2 2 1) ((7 2 2 1) 1) ((6 2 2 2) 1))
    ((7 2 2 2 2) ((6 2 2 2) 1))
    ((6 3 2 2 2) ((6 2 2 2) 1) ((5 3 2 2) 1))
    ((5 4 2 2 2) ((5 3 2 2) 1) ((4 4 2 2) 1))
    ((5 3 3 2 2) ((5 3 2 2) 1) ((4 3 3 2) 1))
    ((4 4 4 3) ((4 4 4) 1) ((4 4 3 1) 1))
    ((4 4 4 2 1) ((4 4 3 1) 1) ((4 4 2 2) 1))
    ((4 4 3 3 1) ((4 4 3 1) 1) ((4 3 3 2) 1))
    ((4 4 3 2 2) ((4 4 2 2) 1) ((4 3 3 2) 1))
    ((4 3 3 3 2) ((4 3 3 2) 1) ((3 3 3 3) 1))
    ((3 3 3 3 3) ((3 3 3 3) 1))
    ))

(defparameter *rep-2-1-layer-2*
  '(((4 2) ((2 1) 1))
    ((4 1 1) ((2 1) 1))
    ((3 3) ((2 1) 1))
    ((3 2 1) ((2 1) 2))
    ((3 1 1 1) ((2 1) 1))
    ((2 2 2) ((2 1) 1))
    ((2 2 1 1) ((2 1) 1))))

(defparameter *rep-2-1-layer-3*
  '(((6 3) ((4 2) 1))
    ((6 2 1) ((4 1 1) 1) ((4 2) 1))
    ((6 1 1 1) ((4 1 1) 1))
    ((5 4) ((4 2) 1) ((3 3) 1))
    ((5 1 1 1 1) ((3 1 1 1) 1) ((4 1 1) 1))
    ((4 1 1 1 1 1) ((3 1 1 1) 1))
    ((3 3 3) ((3 2 1) 1))
    ((3 2 1 1 1 1) ((3 1 1 1) 1) ((2 2 1 1) 1))
    ((2 2 2 2 1) ((2 2 1 1) 1) ((2 2 2) 1))
    ((2 2 2 1 1 1) ((2 2 1 1) 1))
    ))

(defparameter *rep-2-1-layer-4*
  '(((8 4) ((6 3) 1))
    ((8 3 1) ((6 2 1) 1) ((6 3) 1))
    ((8 2 2) ((6 2 1) 1))
    ((8 2 1 1) ((6 1 1 1) 1) ((6 2 1) 1))
    ((8 1 1 1 1) ((6 1 1 1) 1))
    ((7 5) ((6 3) 1) ((5 4) 1))
    ((7 1 1 1 1 1) ((5 1 1 1 1) 1) ((6 1 1 1) 1))
    ((6 6) ((5 4) 1))
    ((6 1 1 1 1 1 1) ((4 1 1 1 1 1) 1) ((5 1 1 1 1) 1))
    ((5 1 1 1 1 1 1 1) ((4 1 1 1 1 1) 1))
    ((4 2 1 1 1 1 1 1) ((4 1 1 1 1 1) 1) ((3 2 1 1 1 1) 1))
    ((3 3 1 1 1 1 1 1) ((3 2 1 1 1 1) 1))
    ((3 2 2 1 1 1 1 1) ((3 2 1 1 1 1) 1) ((2 2 2 1 1 1) 1))
    ((2 2 2 2 2 2) ((2 2 2 2 1) 1))
    ((2 2 2 2 2 1 1) ((2 2 2 1 1 1) 1) ((2 2 2 2 1) 1))
    ((2 2 2 2 1 1 1 1) ((2 2 2 1 1 1) 1))
    ))

(defparameter *rep-3-2-1-layer-4*
  '(((6 4 2) ((3 2 1) 1))
    ((6 4 1 1) ((3 2 1) 1))
    ((6 3 3) ((3 2 1) 1))
    ((6 3 2 1) ((3 2 1) 2))
    ((6 3 1 1 1) ((3 2 1) 1))
    ((6 2 2 2) ((3 2 1) 1))
    ((6 2 2 1 1) ((3 2 1) 1))
    ((5 5 2) ((3 2 1) 1))
    ((5 5 1 1) ((3 2 1) 1))
    ((5 4 3) ((3 2 1) 2))
    ((5 4 1 1 1) ((3 2 1) 2))
    ((5 3 1 1 1 1) ((3 2 1) 1))
    ((5 2 2 2 1) ((3 2 1) 2))
    ((5 2 2 1 1 1) ((3 2 1) 1))
    ((4 4 4) ((3 2 1) 1))
    ((4 4 2 2) ((3 2 1) 2))
    ((4 4 1 1 1 1) ((3 2 1) 1))
    ((4 3 2 1 1 1) ((3 2 1) 2))
    ((4 2 2 2 2) ((3 2 1) 1))
    ((4 2 2 2 1 1) ((3 2 1) 1))
    ((3 3 3 3) ((3 2 1) 1))
    ((3 3 3 2 1) ((3 2 1) 2))
    ((3 3 3 1 1 1) ((3 2 1) 1))
    ((3 3 2 2 2) ((3 2 1) 1))
    ((3 3 2 2 1 1) ((3 2 1) 1))
    ))
  
(defparameter *rep-2-triplets-layer-3*
  '(((6) ((4) 1))
    ((5 1) ((3 1) 1) ((4) 1))
    ((4 2) ((3 1) 1) ((2 2) 1) ((4) 1))
    ((3 3) ((3 1) 1))    
    ((3 2 1) ((3 1) 1) ((2 2) 1))
    ((2 2 2) ((2 2) 1))
    ((4 1 1) ((3 1) 1))
    ))

(defparameter *rep-2-triplets-layer-4*
  '(((8) ((6) 1))
    ((7 1) ((5 1) 1) ((6) 1))
    ((6 2) ((5 1) 1) ((4 2) 1) ((6) 1))
    ((6 1 1) ((4 1 1) 1) ((5 1) 1))
    ((5 3) ((3 3) 1) ((5 1) 1) ((4 2) 1))
    ((5 1 1 1) ((4 1 1) 1))
    ((4 4) ((4 2) 1))
    ((4 2 2) ((3 2 1) 1) ((2 2 2) 1) ((4 2) 1))    
    ((4 2 1 1) ((4 1 1) 1) ((3 2 1) 1))
    ((3 3 2) ((3 3) 1) ((3 2 1) 1))
    ((3 3 1 1) ((3 2 1) 1))
    ((3 2 2 1) ((3 2 1) 1) ((2 2 2) 1))
    ((2 2 2 2) ((2 2 2) 1))
    ))

(defparameter *rep-2-triplets-layer-5*
  '(((10) ((8) 1))
    ((9 1) ((7 1) 1) ((8) 1))
    ((8 2) ((7 1) 1) ((6 2) 1) ((8) 1))
    ((8 1 1) ((6 1 1) 1) ((7 1) 1))
    ((7 3) ((5 3) 1) ((7 1) 1) ((6 2) 1))
    ((7 1 1 1) ((5 1 1 1) 1) ((6 1 1) 1))
    ((6 4) ((5 3) 1) ((4 4) 1) ((6 2) 1))
    ((6 1 1 1 1) ((5 1 1 1) 1))    
    ((5 5) ((5 3) 1))
    ((5 2 1 1 1) ((5 1 1 1) 1) ((4 2 1 1) 1))
    ((4 3 1 1 1) ((4 2 1 1) 1) ((3 3 1 1) 1))
    ((4 2 2 2) ((3 2 2 1) 1) ((2 2 2 2) 1) ((4 2 2) 1))
    ((4 2 2 1 1) ((4 2 1 1) 1) ((3 2 2 1) 1))
    ((3 3 3 1) ((3 3 1 1) 1) ((3 3 2) 1))
    ((3 3 2 2) ((3 3 2) 1) ((3 2 2 1) 1))
    ((3 3 2 1 1) ((3 3 1 1) 1) ((3 2 2 1) 1))
    ((3 2 2 2 1) ((3 2 2 1) 1) ((2 2 2 2) 1))
    ((2 2 2 2 2) ((2 2 2 2) 1))
    ))

(defparameter *rep-3-triplets-layer-2*
  '(((6) ((3) 1))
    ((5 1) ((3) 1))
    ((4 2) ((3) 1))
    ((3 3) ((3) 1))
    ))

(defparameter *rep-3-triplets-layer-3*
  '(((9) ((6) 1))
    ((8 1) ((5 1) 1) ((6) 1))
    ((7 2) ((5 1) 1) ((4 2) 1) ((6) 1))
    ((7 1 1) ((5 1) 1))
    ((6 2 1) ((5 1) 1) ((4 2) 1))
    ((5 4) ((5 1) 1) ((4 2) 1))
    ((5 3 1) ((5 1) 1) ((4 2) 1) ((3 3) 1))
    ((5 2 2) ((4 2) 1))
    ((4 4 1) ((4 2) 1))
    ((4 3 2) ((4 2) 1) ((3 3) 1))
    ((3 3 3) ((3 3) 1))
    ))

(defparameter *rep-3-triplets-layer-4*
  '(((12) ((9) 1))
    ((11 1) ((8 1) 1) ((9) 1))
    ((10 2) ((8 1) 1) ((7 2) 1) ((9) 1))
    ((10 1 1) ((7 1 1) 1) ((8 1) 1))
    ((9 1 1 1) ((7 1 1) 1))
    ((8 2 2) ((6 2 1) 1) ((5 2 2) 1) ((7 2) 1))
    ((8 2 1 1) ((7 1 1) 1) ((6 2 1) 1))
    ((7 3 1 1) ((7 1 1) 1) ((6 2 1) 1) ((5 3 1) 1))
    ((7 2 2 1) ((6 2 1) 1) ((5 2 2) 1))
    ((6 4 1 1) ((6 2 1) 1) ((4 4 1) 1) ((5 3 1) 1))
    ((6 2 2 2) ((5 2 2) 1))
    ((5 5 2) ((5 2 2) 1) ((5 4) 1) ((5 3 1) 1))
    ((5 5 1 1) ((5 3 1) 1))
    ((5 3 3 1) ((5 3 1) 1) ((4 3 2) 1) ((3 3 3) 1))
    ((5 3 2 2) ((5 2 2) 1) ((4 3 2) 1))
    ((4 4 4) ((4 4 1) 1))
    ((4 4 3 1) ((4 4 1) 1) ((4 3 2) 1))
    ((4 4 2 2) ((4 3 2) 1))
    ((4 3 3 2) ((4 3 2) 1) ((3 3 3) 1))
    ((3 3 3 3) ((3 3 3) 1))
    ))

(defparameter *rep-3-triplets-layer-5*
  '(((15) ((12) 1))
    ((14 1) ((11 1) 1) ((12) 1))
    ((13 2) ((11 1) 1) ((10 2) 1) ((12) 1))
    ((13 1 1) ((10 1 1) 1) ((11 1) 1))
    ((12 1 1 1) ((9 1 1 1) 1) ((10 1 1) 1))
    ((11 1 1 1 1) ((9 1 1 1) 1))
    ((10 2 1 1 1) ((9 1 1 1) 1) ((8 2 1 1) 1))
    ((9 3 1 1 1) ((9 1 1 1) 1) ((8 2 1 1) 1) ((7 3 1 1) 1))
    ((9 2 2 2) ((7 2 2 1) 1) ((6 2 2 2) 1) ((8 2 2) 1))
    ((9 2 2 1 1) ((8 2 1 1) 1) ((7 2 2 1) 1))
    ((8 4 1 1 1) ((8 2 1 1) 1) ((7 3 1 1) 1) ((6 4 1 1) 1))
    ((8 2 2 2 1) ((7 2 2 1) 1) ((6 2 2 2) 1))
    ((7 5 1 1 1) ((7 3 1 1) 1) ((6 4 1 1) 1) ((5 5 1 1) 1))
    ((7 2 2 2 2) ((6 2 2 2) 1))
    ((6 6 1 1 1) ((6 4 1 1) 1))
    ((6 3 2 2 2) ((6 2 2 2) 1) ((5 3 2 2) 1))
    ((5 3 3 3 1) ((5 3 3 1) 1) ((4 3 3 2) 1) ((3 3 3 3) 1))
    ((5 3 3 2 2) ((5 3 2 2) 1) ((4 3 3 2) 1))
    ((5 4 2 2 2) ((5 3 2 2) 1) ((4 4 2 2) 1))
    ((5 5 5) ((5 5 2) 1))
    ((4 4 4 3) ((4 4 4) 1) ((4 4 3 1) 1))
    ((4 4 4 2 1) ((4 4 3 1) 1) ((4 4 2 2) 1))
    ((4 4 3 3 1) ((4 4 3 1) 1) ((4 3 3 2) 1))
    ((4 4 3 2 2) ((4 4 2 2) 1) ((4 3 3 2) 1))
    ((4 3 3 3 2) ((4 3 3 2) 1) ((3 3 3 3) 1))
    ((3 3 3 3 3) ((3 3 3 3) 1))
    ))

(defparameter *rep-4-triplets-layer-2*
  '(((8) ((4) 1))
    ((7 1) ((4) 1))
    ((6 2) ((4) 1))
    ((5 3) ((4) 1))
    ((4 4) ((4) 1))
    ))

(defparameter *rep-4-triplets-layer-3*
  '(((12) ((8) 1))
    ((11 1) ((7 1) 1) ((8) 1))
    ((10 2) ((7 1) 1) ((6 2) 1) ((8) 1))
    ((10 1 1) ((7 1) 1))
    ((9 2 1) ((7 1) 1) ((6 2) 1))
    ((8 3 1) ((7 1) 1) ((6 2) 1) ((5 3) 1))
    ((8 2 2) ((6 2) 1))
    ((7 5) ((7 1) 1) ((6 2) 1) ((5 3) 1))
    ((7 3 2) ((6 2) 1) ((5 3) 1))
    ((6 6) ((6 2) 1))
    ((6 5 1) ((6 2) 1) ((5 3) 1))
    ((6 4 2) ((6 2) 1) ((5 3) 1) ((4 4) 1))
    ((6 3 3) ((5 3) 1))
    ((5 5 2) ((5 3) 1))
    ((5 4 3) ((5 3) 1) ((4 4) 1))
    ((4 4 4) ((4 4) 1))
    ))

  

'((:LAYER 5 (((6 4) ((6 2) 1) ((5 3) 1) ((4 4) 1))))
  (:LAYER 4 (((6 2) ((5 1) 1) ((4 2) 1) ((6) 1))
	     ((5 3) ((5 1) 1) ((4 2) 1) ((3 3) 1))
	     ((4 4) ((4 2) 1))))
  (:LAYER 3 (((5 1) ((3 1) 1) ((4) 1))
	     ((4 2) ((3 1) 1) ((2 2) 1) ((4) 1))
	     ((6) ((4) 1)) ((3 3) ((3 1) 1))))
  (:LAYER 2 (((3 1) ((2) 1))
	     ((4) ((2) 1))
	     ((2 2) ((2) 1))))
  (:LAYER 1 (((2) (NIL 1)))))

(defparameter *rep-1-1-triplets-layer-3*
  '(((3 3) ((2 2) 1))
    ((3 2 1) ((2 1 1) 1) ((2 2) 1))
    ((3 1 1 1) ((2 1 1) 1))
    ((2 2 2) ((2 1 1) 1))    
    ((2 2 1 1) ((1 1 1 1) 1) ((2 1 1) 1) ((2 2) 1))
    ((2 1 1 1 1) ((1 1 1 1) 1) ((2 1 1) 1))
    ((1 1 1 1 1 1) ((1 1 1 1) 1))
    ))

(defparameter *rep-1-1-1-triplets-layer-2
  '(((2 2 2) ((1 1 1) 1))
    ((2 2 1 1) ((1 1 1) 1))
    ((2 1 1 1 1) ((1 1 1) 1))
    ((1 1 1 1 1 1) ((1 1 1) 1))
    ))

(defparameter *rep-1-1-1-triplets-layer-3
  '(((3 3 3) ((2 2 2) 1))
    ((3 3 2 1) ((2 2 1 1) 1) ((2 2 2) 1))
    ((3 3 1 1 1) ((2 2 1 1) 1))
    ((3 2 2 2) ((2 2 1 1) 1))
    ((3 2 2 1 1) ((2 1 1 1 1) 1) ((2 2 1 1) 1) ((2 2 2) 1))
    ((3 2 1 1 1 1) ((2 1 1 1 1) 1) ((2 2 1 1) 1))
    ((3 1 1 1 1 1 1) ((2 1 1 1 1) 1))    
    ((2 2 2 2 1) ((2 1 1 1 1) 1) ((2 2 1 1) 1))
    ((2 2 1 1 1 1 1) ((1 1 1 1 1 1) 1) ((2 1 1 1 1) 1) ((2 2 1 1) 1))
    ((2 1 1 1 1 1 1 1) ((1 1 1 1 1 1) 1) ((2 1 1 1 1) 1))
    ((1 1 1 1 1 1 1 1 1) ((1 1 1 1 1 1) 1))
    ))

(defparameter *rep-1-1-1-triplets-layer-4
  '(((4 4 4) ((3 3 3) 1))
    ((4 4 3 1) ((3 3 2 1) 1) ((3 3 3) 1))
    ((4 4 2 2) ((3 3 2 1) 1))
    ((4 4 2 1 1) ((3 3 1 1 1) 1) ((3 3 2 1) 1))
    ((4 4 1 1 1 1) ((3 3 1 1 1) 1))
    ((4 3 3 2) ((3 2 2 2) 1) ((3 3 2 1) 1))
    ((4 3 3 1 1) ((3 2 2 1 1) 1) ((3 3 2 1) 1) ((3 3 3) 1))
    ((4 3 1 1 1 1 1) ((3 2 1 1 1 1) 1) ((3 3 1 1 1) 1))
    ((4 2 2 2 2) ((3 2 2 1 1) 1))
    ((4 2 2 2 1 1) ((3 2 1 1 1 1) 1) ((3 2 2 2) 1) ((3 2 2 1 1) 1))
    ((4 2 2 1 1 1 1) ((3 1 1 1 1 1 1) 1) ((3 2 1 1 1 1) 1) ((3 2 2 1 1) 1))
    ((4 2 1 1 1 1 1 1) ((3 1 1 1 1 1 1) 1) ((3 2 1 1 1 1) 1))
    ((4 1 1 1 1 1 1 1 1) ((3 1 1 1 1 1 1) 1))
    ((3 3 3 3) ((3 2 2 2) 1))
    ((3 3 2 2 2) ((3 3 1 1 1) 1) ((2 2 2 2 1) 1) ((3 2 2 1 1) 1))
    ((3 3 1 1 1 1 1 1) ((2 2 1 1 1 1 1) 1) ((3 2 1 1 1 1) 1) ((3 3 1 1 1) 1))
    ((3 1 1 1 1 1 1 1 1 1) ((2 1 1 1 1 1 1 1) 1) ((3 1 1 1 1 1 1) 1))    
    ((2 2 1 1 1 1 1 1 1 1) ((1 1 1 1 1 1 1 1 1) 1) ((2 1 1 1 1 1 1 1) 1) ((2 2 1 1 1 1 1) 1))
    ((2 1 1 1 1 1 1 1 1 1 1) ((1 1 1 1 1 1 1 1 1) 1) ((2 1 1 1 1 1 1 1) 1))
    ((1 1 1 1 1 1 1 1 1 1 1 1) ((1 1 1 1 1 1 1 1 1) 1))
    ))

(defparameter *rep-3-quadruplet-appearances*
  '((5 (15) (12 3) (13 2) (14 1) (9 6) (10 5) (11 4) (11 2 2) (12 2 1) (13 1 1) (8 7) (6 3 3 3)
     (9 2 2 2) (10 2 2 1) (11 2 1 1) (12 1 1 1) (3 3 3 3 3) (4 3 3 3 2)
     (5 3 3 3 1) (5 4 3 3) (4 4 3 2 2) (4 4 3 3 1) (5 3 3 2 2) (6 3 3 2 1)
     (5 5 3 2) (5 5 3 1 1) (6 4 3 1 1) (7 3 3 1 1) (5 4 4 2) (5 5 4 1) (4 4 4 2 1)
     (5 4 2 2 2) (6 4 2 2 1) (4 4 4 3) (5 4 4 1 1) (5 5 2 2 1) (6 3 2 2 2)
     (7 3 2 2 1) (6 5 2 1 1) (7 4 2 1 1) (8 3 2 1 1) (5 5 5) (7 5 1 1 1) (6 6 1 1 1)
     (8 4 1 1 1) (9 3 1 1 1) (7 2 2 2 2) (8 2 2 2 1) (9 2 2 1 1) (10 2 1 1 1) (11 1 1 1 1))
    (4 (9 3) (6 6) (7 5) (8 4) (6 3 3) (6 5 1) (9 2 1) (5 4 3) (5 4 2 1) (6 3 2 1))
    (3 (6 3))
    (2) (1) (0)))
